// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignalMT4Trade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SignalMT4Trade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoTypes {

namespace {

const ::google::protobuf::Descriptor* MT4TradeSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MT4TradeSignal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradeSide_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SignalMT4Trade_2eproto() {
  protobuf_AddDesc_SignalMT4Trade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SignalMT4Trade.proto");
  GOOGLE_CHECK(file != NULL);
  MT4TradeSignal_descriptor_ = file->message_type(0);
  static const int MT4TradeSignal_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, equity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, stoploss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, takeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, providercommission_),
  };
  MT4TradeSignal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MT4TradeSignal_descriptor_,
      MT4TradeSignal::default_instance_,
      MT4TradeSignal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MT4TradeSignal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MT4TradeSignal));
  ActionType_descriptor_ = file->enum_type(0);
  TradeSide_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SignalMT4Trade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MT4TradeSignal_descriptor_, &MT4TradeSignal::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SignalMT4Trade_2eproto() {
  delete MT4TradeSignal::default_instance_;
  delete MT4TradeSignal_reflection_;
}

void protobuf_AddDesc_SignalMT4Trade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SignalMT4Trade.proto\022\nProtoTypes\"\323\002\n\016M"
    "T4TradeSignal\022#\n\004Side\030\001 \002(\0162\025.ProtoTypes"
    ".TradeSide\022*\n\nActionType\030\002 \002(\0162\026.ProtoTy"
    "pes.ActionType\022\020\n\010DateTime\030\003 \002(\003\022\016\n\006Equi"
    "ty\030\004 \002(\001\022\017\n\007Balance\030\005 \002(\001\022\016\n\006Volume\030\006 \002("
    "\001\022\016\n\006Symbol\030\007 \002(\t\022\023\n\010StopLoss\030\010 \001(\001:\0010\022\025"
    "\n\nTakeProfit\030\t \001(\001:\0010\022\r\n\005Login\030\n \002(\005\022\016\n\006"
    "Server\030\013 \002(\t\022\017\n\007OrderID\030\014 \002(\005\022\017\n\007Comment"
    "\030\r \002(\t\022\021\n\006Profit\030\016 \002(\001:\0010\022\035\n\022ProviderCom"
    "mission\030\017 \002(\001:\0010*!\n\nActionType\022\010\n\004Open\020\000"
    "\022\t\n\005Close\020\001*\036\n\tTradeSide\022\007\n\003Buy\020\000\022\010\n\004Sel"
    "l\020\001", 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SignalMT4Trade.proto", &protobuf_RegisterTypes);
  MT4TradeSignal::default_instance_ = new MT4TradeSignal();
  MT4TradeSignal::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SignalMT4Trade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SignalMT4Trade_2eproto {
  StaticDescriptorInitializer_SignalMT4Trade_2eproto() {
    protobuf_AddDesc_SignalMT4Trade_2eproto();
  }
} static_descriptor_initializer_SignalMT4Trade_2eproto_;
const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionType_descriptor_;
}
bool ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeSide_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeSide_descriptor_;
}
bool TradeSide_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MT4TradeSignal::kSideFieldNumber;
const int MT4TradeSignal::kActionTypeFieldNumber;
const int MT4TradeSignal::kDateTimeFieldNumber;
const int MT4TradeSignal::kEquityFieldNumber;
const int MT4TradeSignal::kBalanceFieldNumber;
const int MT4TradeSignal::kVolumeFieldNumber;
const int MT4TradeSignal::kSymbolFieldNumber;
const int MT4TradeSignal::kStopLossFieldNumber;
const int MT4TradeSignal::kTakeProfitFieldNumber;
const int MT4TradeSignal::kLoginFieldNumber;
const int MT4TradeSignal::kServerFieldNumber;
const int MT4TradeSignal::kOrderIDFieldNumber;
const int MT4TradeSignal::kCommentFieldNumber;
const int MT4TradeSignal::kProfitFieldNumber;
const int MT4TradeSignal::kProviderCommissionFieldNumber;
#endif  // !_MSC_VER

MT4TradeSignal::MT4TradeSignal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MT4TradeSignal::InitAsDefaultInstance() {
}

MT4TradeSignal::MT4TradeSignal(const MT4TradeSignal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MT4TradeSignal::SharedCtor() {
  _cached_size_ = 0;
  side_ = 0;
  actiontype_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  equity_ = 0;
  balance_ = 0;
  volume_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stoploss_ = 0;
  takeprofit_ = 0;
  login_ = 0;
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderid_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profit_ = 0;
  providercommission_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MT4TradeSignal::~MT4TradeSignal() {
  SharedDtor();
}

void MT4TradeSignal::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void MT4TradeSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MT4TradeSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MT4TradeSignal_descriptor_;
}

const MT4TradeSignal& MT4TradeSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignalMT4Trade_2eproto();
  return *default_instance_;
}

MT4TradeSignal* MT4TradeSignal::default_instance_ = NULL;

MT4TradeSignal* MT4TradeSignal::New() const {
  return new MT4TradeSignal;
}

void MT4TradeSignal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    side_ = 0;
    actiontype_ = 0;
    datetime_ = GOOGLE_LONGLONG(0);
    equity_ = 0;
    balance_ = 0;
    volume_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    stoploss_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    takeprofit_ = 0;
    login_ = 0;
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
    orderid_ = 0;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    profit_ = 0;
    providercommission_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MT4TradeSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoTypes.TradeSide Side = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoTypes::TradeSide_IsValid(value)) {
            set_side(static_cast< ::ProtoTypes::TradeSide >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ActionType;
        break;
      }

      // required .ProtoTypes.ActionType ActionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoTypes::ActionType_IsValid(value)) {
            set_actiontype(static_cast< ::ProtoTypes::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DateTime;
        break;
      }

      // required int64 DateTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Equity;
        break;
      }

      // required double Equity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Equity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &equity_)));
          set_has_equity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Balance;
        break;
      }

      // required double Balance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Volume;
        break;
      }

      // required double Volume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Symbol;
        break;
      }

      // required string Symbol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_StopLoss;
        break;
      }

      // optional double StopLoss = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_StopLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
          set_has_stoploss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_TakeProfit;
        break;
      }

      // optional double TakeProfit = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TakeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
          set_has_takeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Login;
        break;
      }

      // required int32 Login = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_)));
          set_has_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Server;
        break;
      }

      // required string Server = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_OrderID;
        break;
      }

      // required int32 OrderID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Comment;
        break;
      }

      // required string Comment = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_Profit;
        break;
      }

      // required double Profit = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_ProviderCommission;
        break;
      }

      // required double ProviderCommission = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ProviderCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &providercommission_)));
          set_has_providercommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MT4TradeSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoTypes.TradeSide Side = 1;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->side(), output);
  }

  // required .ProtoTypes.ActionType ActionType = 2;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->actiontype(), output);
  }

  // required int64 DateTime = 3;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->datetime(), output);
  }

  // required double Equity = 4;
  if (has_equity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->equity(), output);
  }

  // required double Balance = 5;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->balance(), output);
  }

  // required double Volume = 6;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->volume(), output);
  }

  // required string Symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->symbol(), output);
  }

  // optional double StopLoss = 8 [default = 0];
  if (has_stoploss()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->stoploss(), output);
  }

  // optional double TakeProfit = 9 [default = 0];
  if (has_takeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->takeprofit(), output);
  }

  // required int32 Login = 10;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->login(), output);
  }

  // required string Server = 11;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->server(), output);
  }

  // required int32 OrderID = 12;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->orderid(), output);
  }

  // required string Comment = 13;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->comment(), output);
  }

  // required double Profit = 14 [default = 0];
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->profit(), output);
  }

  // required double ProviderCommission = 15 [default = 0];
  if (has_providercommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->providercommission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MT4TradeSignal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoTypes.TradeSide Side = 1;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->side(), target);
  }

  // required .ProtoTypes.ActionType ActionType = 2;
  if (has_actiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->actiontype(), target);
  }

  // required int64 DateTime = 3;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->datetime(), target);
  }

  // required double Equity = 4;
  if (has_equity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->equity(), target);
  }

  // required double Balance = 5;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->balance(), target);
  }

  // required double Volume = 6;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->volume(), target);
  }

  // required string Symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->symbol(), target);
  }

  // optional double StopLoss = 8 [default = 0];
  if (has_stoploss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->stoploss(), target);
  }

  // optional double TakeProfit = 9 [default = 0];
  if (has_takeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->takeprofit(), target);
  }

  // required int32 Login = 10;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->login(), target);
  }

  // required string Server = 11;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->server(), target);
  }

  // required int32 OrderID = 12;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->orderid(), target);
  }

  // required string Comment = 13;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->comment(), target);
  }

  // required double Profit = 14 [default = 0];
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->profit(), target);
  }

  // required double ProviderCommission = 15 [default = 0];
  if (has_providercommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->providercommission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MT4TradeSignal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoTypes.TradeSide Side = 1;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // required .ProtoTypes.ActionType ActionType = 2;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actiontype());
    }

    // required int64 DateTime = 3;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }

    // required double Equity = 4;
    if (has_equity()) {
      total_size += 1 + 8;
    }

    // required double Balance = 5;
    if (has_balance()) {
      total_size += 1 + 8;
    }

    // required double Volume = 6;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required string Symbol = 7;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional double StopLoss = 8 [default = 0];
    if (has_stoploss()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double TakeProfit = 9 [default = 0];
    if (has_takeprofit()) {
      total_size += 1 + 8;
    }

    // required int32 Login = 10;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login());
    }

    // required string Server = 11;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // required int32 OrderID = 12;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // required string Comment = 13;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required double Profit = 14 [default = 0];
    if (has_profit()) {
      total_size += 1 + 8;
    }

    // required double ProviderCommission = 15 [default = 0];
    if (has_providercommission()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MT4TradeSignal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MT4TradeSignal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MT4TradeSignal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MT4TradeSignal::MergeFrom(const MT4TradeSignal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_equity()) {
      set_equity(from.equity());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_stoploss()) {
      set_stoploss(from.stoploss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_takeprofit()) {
      set_takeprofit(from.takeprofit());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_providercommission()) {
      set_providercommission(from.providercommission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MT4TradeSignal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MT4TradeSignal::CopyFrom(const MT4TradeSignal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MT4TradeSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007e7f) != 0x00007e7f) return false;

  return true;
}

void MT4TradeSignal::Swap(MT4TradeSignal* other) {
  if (other != this) {
    std::swap(side_, other->side_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(datetime_, other->datetime_);
    std::swap(equity_, other->equity_);
    std::swap(balance_, other->balance_);
    std::swap(volume_, other->volume_);
    std::swap(symbol_, other->symbol_);
    std::swap(stoploss_, other->stoploss_);
    std::swap(takeprofit_, other->takeprofit_);
    std::swap(login_, other->login_);
    std::swap(server_, other->server_);
    std::swap(orderid_, other->orderid_);
    std::swap(comment_, other->comment_);
    std::swap(profit_, other->profit_);
    std::swap(providercommission_, other->providercommission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MT4TradeSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MT4TradeSignal_descriptor_;
  metadata.reflection = MT4TradeSignal_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTypes

// @@protoc_insertion_point(global_scope)
