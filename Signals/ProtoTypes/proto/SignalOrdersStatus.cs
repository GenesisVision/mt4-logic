//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: SignalOrdersStatus.proto
// Note: requires additional types generated from: Signal.proto
// Note: requires additional types generated from: SignalMT4Trade.proto

using System;
using System.Collections.Generic;
using System.ComponentModel;
using ProtoBuf;

namespace ProtoTypes
{
  [Serializable, ProtoContract(Name=@"OrderStatus")]
  public partial class OrderStatus : IExtensible
  {
    public OrderStatus() {}
    
    private int _OrderId;
    [ProtoMember(1, IsRequired = true, Name=@"OrderId", DataFormat = DataFormat.TwosComplement)]
    public int OrderId
    {
      get { return _OrderId; }
      set { _OrderId = value; }
    }
    private TradeSide _Side;
    [ProtoMember(2, IsRequired = true, Name=@"Side", DataFormat = DataFormat.TwosComplement)]
    public TradeSide Side
    {
      get { return _Side; }
      set { _Side = value; }
    }
    private long _DateTime;
    [ProtoMember(4, IsRequired = true, Name=@"DateTime", DataFormat = DataFormat.TwosComplement)]
    public long DateTime
    {
      get { return _DateTime; }
      set { _DateTime = value; }
    }
    private double _Volume;
    [ProtoMember(7, IsRequired = true, Name=@"Volume", DataFormat = DataFormat.TwosComplement)]
    public double Volume
    {
      get { return _Volume; }
      set { _Volume = value; }
    }
    private string _Symbol;
    [ProtoMember(8, IsRequired = true, Name=@"Symbol", DataFormat = DataFormat.Default)]
    public string Symbol
    {
      get { return _Symbol; }
      set { _Symbol = value; }
    }
    private double _StopLoss = (double)0;
    [ProtoMember(9, IsRequired = false, Name=@"StopLoss", DataFormat = DataFormat.TwosComplement)]
    [DefaultValue((double)0)]
    public double StopLoss
    {
      get { return _StopLoss; }
      set { _StopLoss = value; }
    }
    private double _TakeProfit = (double)0;
    [ProtoMember(10, IsRequired = false, Name=@"TakeProfit", DataFormat = DataFormat.TwosComplement)]
    [DefaultValue((double)0)]
    public double TakeProfit
    {
      get { return _TakeProfit; }
      set { _TakeProfit = value; }
    }
    private string _Comment;
    [ProtoMember(11, IsRequired = true, Name=@"Comment", DataFormat = DataFormat.Default)]
    public string Comment
    {
      get { return _Comment; }
      set { _Comment = value; }
    }
    private IExtension extensionObject;
    IExtension IExtensible.GetExtensionObject(bool createIfMissing)
      { return Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [Serializable, ProtoContract(Name=@"AccountOrdersStatus")]
  public partial class AccountOrdersStatus : IExtensible
  {
    public AccountOrdersStatus() {}
    
    private int _login;
    [ProtoMember(1, IsRequired = true, Name=@"login", DataFormat = DataFormat.TwosComplement)]
    public int login
    {
      get { return _login; }
      set { _login = value; }
    }
    private readonly List<OrderStatus> _orderStatus = new List<OrderStatus>();
    [ProtoMember(2, Name=@"orderStatus", DataFormat = DataFormat.Default)]
    public List<OrderStatus> orderStatus
    {
      get { return _orderStatus; }
    }
  
    private IExtension extensionObject;
    IExtension IExtensible.GetExtensionObject(bool createIfMissing)
      { return Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [Serializable, ProtoContract(Name=@"OrdersStatusResponse")]
  public partial class OrdersStatusResponse : IExtensible
  {
    public OrdersStatusResponse() {}
    
    private readonly List<AccountOrdersStatus> _ordersStatus = new List<AccountOrdersStatus>();
    [ProtoMember(1, Name=@"ordersStatus", DataFormat = DataFormat.Default)]
    public List<AccountOrdersStatus> ordersStatus
    {
      get { return _ordersStatus; }
    }
  
    private IExtension extensionObject;
    IExtension IExtensible.GetExtensionObject(bool createIfMissing)
      { return Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}