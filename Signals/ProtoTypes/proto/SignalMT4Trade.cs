//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: SignalMT4Trade.proto

using System;
using System.ComponentModel;
using ProtoBuf;

namespace ProtoTypes
{
  [Serializable, ProtoContract(Name=@"MT4TradeSignal")]
  public partial class MT4TradeSignal : IExtensible
  {
    public MT4TradeSignal() {}
    
    private TradeSide _Side;
    [ProtoMember(1, IsRequired = true, Name=@"Side", DataFormat = DataFormat.TwosComplement)]
    public TradeSide Side
    {
      get { return _Side; }
      set { _Side = value; }
    }
    private ActionType _ActionType;
    [ProtoMember(2, IsRequired = true, Name=@"ActionType", DataFormat = DataFormat.TwosComplement)]
    public ActionType ActionType
    {
      get { return _ActionType; }
      set { _ActionType = value; }
    }
    private long _DateTime;
    [ProtoMember(3, IsRequired = true, Name=@"DateTime", DataFormat = DataFormat.TwosComplement)]
    public long DateTime
    {
      get { return _DateTime; }
      set { _DateTime = value; }
    }
    private double _Equity;
    [ProtoMember(4, IsRequired = true, Name=@"Equity", DataFormat = DataFormat.TwosComplement)]
    public double Equity
    {
      get { return _Equity; }
      set { _Equity = value; }
    }
    private double _Balance;
    [ProtoMember(5, IsRequired = true, Name=@"Balance", DataFormat = DataFormat.TwosComplement)]
    public double Balance
    {
      get { return _Balance; }
      set { _Balance = value; }
    }
    private double _Volume;
    [ProtoMember(6, IsRequired = true, Name=@"Volume", DataFormat = DataFormat.TwosComplement)]
    public double Volume
    {
      get { return _Volume; }
      set { _Volume = value; }
    }
    private string _Symbol;
    [ProtoMember(7, IsRequired = true, Name=@"Symbol", DataFormat = DataFormat.Default)]
    public string Symbol
    {
      get { return _Symbol; }
      set { _Symbol = value; }
    }
    private double _StopLoss = (double)0;
    [ProtoMember(8, IsRequired = false, Name=@"StopLoss", DataFormat = DataFormat.TwosComplement)]
    [DefaultValue((double)0)]
    public double StopLoss
    {
      get { return _StopLoss; }
      set { _StopLoss = value; }
    }
    private double _TakeProfit = (double)0;
    [ProtoMember(9, IsRequired = false, Name=@"TakeProfit", DataFormat = DataFormat.TwosComplement)]
    [DefaultValue((double)0)]
    public double TakeProfit
    {
      get { return _TakeProfit; }
      set { _TakeProfit = value; }
    }
    private int _Login;
    [ProtoMember(10, IsRequired = true, Name=@"Login", DataFormat = DataFormat.TwosComplement)]
    public int Login
    {
      get { return _Login; }
      set { _Login = value; }
    }
    private string _Server;
    [ProtoMember(11, IsRequired = true, Name=@"Server", DataFormat = DataFormat.Default)]
    public string Server
    {
      get { return _Server; }
      set { _Server = value; }
    }
    private int _OrderID;
    [ProtoMember(12, IsRequired = true, Name=@"OrderID", DataFormat = DataFormat.TwosComplement)]
    public int OrderID
    {
      get { return _OrderID; }
      set { _OrderID = value; }
    }
    private string _Comment;
    [ProtoMember(13, IsRequired = true, Name=@"Comment", DataFormat = DataFormat.Default)]
    public string Comment
    {
      get { return _Comment; }
      set { _Comment = value; }
    }
    private double _Profit;
    [ProtoMember(14, IsRequired = true, Name=@"Profit", DataFormat = DataFormat.TwosComplement)]
    public double Profit
    {
      get { return _Profit; }
      set { _Profit = value; }
    }
    private double _ProviderCommission;
    [ProtoMember(15, IsRequired = true, Name=@"ProviderCommission", DataFormat = DataFormat.TwosComplement)]
    public double ProviderCommission
    {
      get { return _ProviderCommission; }
      set { _ProviderCommission = value; }
    }
    private IExtension extensionObject;
    IExtension IExtensible.GetExtensionObject(bool createIfMissing)
      { return Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    [ProtoContract(Name=@"ActionType")]
    public enum ActionType
    {
            
      [ProtoEnum(Name=@"Open", Value=0)]
      Open = 0,
            
      [ProtoEnum(Name=@"Close", Value=1)]
      Close = 1
    }
  
    [ProtoContract(Name=@"TradeSide")]
    public enum TradeSide
    {
            
      [ProtoEnum(Name=@"Buy", Value=0)]
      Buy = 0,
            
      [ProtoEnum(Name=@"Sell", Value=1)]
      Sell = 1
    }
  
}