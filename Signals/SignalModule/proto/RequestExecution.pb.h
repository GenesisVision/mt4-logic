// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RequestExecution.proto

#ifndef PROTOBUF_RequestExecution_2eproto__INCLUDED
#define PROTOBUF_RequestExecution_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "SignalMT4Trade.pb.h"
#include "Signal.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoTypes {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RequestExecution_2eproto();
void protobuf_AssignDesc_RequestExecution_2eproto();
void protobuf_ShutdownFile_RequestExecution_2eproto();

class ExecutionOrder;
class ExecutionSignal;

// ===================================================================

class ExecutionOrder : public ::google::protobuf::Message {
 public:
  ExecutionOrder();
  virtual ~ExecutionOrder();

  ExecutionOrder(const ExecutionOrder& from);

  inline ExecutionOrder& operator=(const ExecutionOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionOrder& default_instance();

  void Swap(ExecutionOrder* other);

  // implements Message ----------------------------------------------

  ExecutionOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionOrder& from);
  void MergeFrom(const ExecutionOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline ::google::protobuf::int32 login() const;
  inline void set_login(::google::protobuf::int32 value);

  // required .ProtoTypes.ActionType ActionType = 2;
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActionTypeFieldNumber = 2;
  inline ::ProtoTypes::ActionType actiontype() const;
  inline void set_actiontype(::ProtoTypes::ActionType value);

  // required .ProtoTypes.TradeSide Side = 3;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 3;
  inline ::ProtoTypes::TradeSide side() const;
  inline void set_side(::ProtoTypes::TradeSide value);

  // required double Volume = 4;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 4;
  inline double volume() const;
  inline void set_volume(double value);

  // required string Symbol = 5;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 5;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional int32 OrderID = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 6;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional double Commission = 7;
  inline bool has_commission() const;
  inline void clear_commission();
  static const int kCommissionFieldNumber = 7;
  inline double commission() const;
  inline void set_commission(double value);

  // @@protoc_insertion_point(class_scope:ProtoTypes.ExecutionOrder)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_commission();
  inline void clear_has_commission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 login_;
  int actiontype_;
  double volume_;
  int side_;
  ::google::protobuf::int32 orderid_;
  ::std::string* symbol_;
  double commission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_RequestExecution_2eproto();
  friend void protobuf_AssignDesc_RequestExecution_2eproto();
  friend void protobuf_ShutdownFile_RequestExecution_2eproto();

  void InitAsDefaultInstance();
  static ExecutionOrder* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionSignal : public ::google::protobuf::Message {
 public:
  ExecutionSignal();
  virtual ~ExecutionSignal();

  ExecutionSignal(const ExecutionSignal& from);

  inline ExecutionSignal& operator=(const ExecutionSignal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionSignal& default_instance();

  void Swap(ExecutionSignal* other);

  // implements Message ----------------------------------------------

  ExecutionSignal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionSignal& from);
  void MergeFrom(const ExecutionSignal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Comment = 1;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 1;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // required string Destination = 2;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 2;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  inline void set_allocated_destination(::std::string* destination);

  // repeated .ProtoTypes.ExecutionOrder Orders = 3;
  inline int orders_size() const;
  inline void clear_orders();
  static const int kOrdersFieldNumber = 3;
  inline const ::ProtoTypes::ExecutionOrder& orders(int index) const;
  inline ::ProtoTypes::ExecutionOrder* mutable_orders(int index);
  inline ::ProtoTypes::ExecutionOrder* add_orders();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoTypes::ExecutionOrder >&
      orders() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoTypes::ExecutionOrder >*
      mutable_orders();

  // @@protoc_insertion_point(class_scope:ProtoTypes.ExecutionSignal)
 private:
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_destination();
  inline void clear_has_destination();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* comment_;
  ::std::string* destination_;
  ::google::protobuf::RepeatedPtrField< ::ProtoTypes::ExecutionOrder > orders_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RequestExecution_2eproto();
  friend void protobuf_AssignDesc_RequestExecution_2eproto();
  friend void protobuf_ShutdownFile_RequestExecution_2eproto();

  void InitAsDefaultInstance();
  static ExecutionSignal* default_instance_;
};
// ===================================================================


// ===================================================================

// ExecutionOrder

// required int32 Login = 1;
inline bool ExecutionOrder::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionOrder::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionOrder::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionOrder::clear_login() {
  login_ = 0;
  clear_has_login();
}
inline ::google::protobuf::int32 ExecutionOrder::login() const {
  return login_;
}
inline void ExecutionOrder::set_login(::google::protobuf::int32 value) {
  set_has_login();
  login_ = value;
}

// required .ProtoTypes.ActionType ActionType = 2;
inline bool ExecutionOrder::has_actiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecutionOrder::set_has_actiontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecutionOrder::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecutionOrder::clear_actiontype() {
  actiontype_ = 0;
  clear_has_actiontype();
}
inline ::ProtoTypes::ActionType ExecutionOrder::actiontype() const {
  return static_cast< ::ProtoTypes::ActionType >(actiontype_);
}
inline void ExecutionOrder::set_actiontype(::ProtoTypes::ActionType value) {
  assert(::ProtoTypes::ActionType_IsValid(value));
  set_has_actiontype();
  actiontype_ = value;
}

// required .ProtoTypes.TradeSide Side = 3;
inline bool ExecutionOrder::has_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecutionOrder::set_has_side() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecutionOrder::clear_has_side() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecutionOrder::clear_side() {
  side_ = 0;
  clear_has_side();
}
inline ::ProtoTypes::TradeSide ExecutionOrder::side() const {
  return static_cast< ::ProtoTypes::TradeSide >(side_);
}
inline void ExecutionOrder::set_side(::ProtoTypes::TradeSide value) {
  assert(::ProtoTypes::TradeSide_IsValid(value));
  set_has_side();
  side_ = value;
}

// required double Volume = 4;
inline bool ExecutionOrder::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecutionOrder::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecutionOrder::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecutionOrder::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline double ExecutionOrder::volume() const {
  return volume_;
}
inline void ExecutionOrder::set_volume(double value) {
  set_has_volume();
  volume_ = value;
}

// required string Symbol = 5;
inline bool ExecutionOrder::has_symbol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExecutionOrder::set_has_symbol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExecutionOrder::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExecutionOrder::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& ExecutionOrder::symbol() const {
  return *symbol_;
}
inline void ExecutionOrder::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void ExecutionOrder::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void ExecutionOrder::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecutionOrder::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* ExecutionOrder::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecutionOrder::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 OrderID = 6;
inline bool ExecutionOrder::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExecutionOrder::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExecutionOrder::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExecutionOrder::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 ExecutionOrder::orderid() const {
  return orderid_;
}
inline void ExecutionOrder::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
}

// optional double Commission = 7;
inline bool ExecutionOrder::has_commission() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExecutionOrder::set_has_commission() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExecutionOrder::clear_has_commission() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExecutionOrder::clear_commission() {
  commission_ = 0;
  clear_has_commission();
}
inline double ExecutionOrder::commission() const {
  return commission_;
}
inline void ExecutionOrder::set_commission(double value) {
  set_has_commission();
  commission_ = value;
}

// -------------------------------------------------------------------

// ExecutionSignal

// required string Comment = 1;
inline bool ExecutionSignal::has_comment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionSignal::set_has_comment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionSignal::clear_has_comment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionSignal::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ExecutionSignal::comment() const {
  return *comment_;
}
inline void ExecutionSignal::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ExecutionSignal::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ExecutionSignal::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecutionSignal::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* ExecutionSignal::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecutionSignal::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Destination = 2;
inline bool ExecutionSignal::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecutionSignal::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecutionSignal::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecutionSignal::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& ExecutionSignal::destination() const {
  return *destination_;
}
inline void ExecutionSignal::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void ExecutionSignal::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void ExecutionSignal::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecutionSignal::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* ExecutionSignal::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecutionSignal::set_allocated_destination(::std::string* destination) {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    delete destination_;
  }
  if (destination) {
    set_has_destination();
    destination_ = destination;
  } else {
    clear_has_destination();
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ProtoTypes.ExecutionOrder Orders = 3;
inline int ExecutionSignal::orders_size() const {
  return orders_.size();
}
inline void ExecutionSignal::clear_orders() {
  orders_.Clear();
}
inline const ::ProtoTypes::ExecutionOrder& ExecutionSignal::orders(int index) const {
  return orders_.Get(index);
}
inline ::ProtoTypes::ExecutionOrder* ExecutionSignal::mutable_orders(int index) {
  return orders_.Mutable(index);
}
inline ::ProtoTypes::ExecutionOrder* ExecutionSignal::add_orders() {
  return orders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoTypes::ExecutionOrder >&
ExecutionSignal::orders() const {
  return orders_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoTypes::ExecutionOrder >*
ExecutionSignal::mutable_orders() {
  return &orders_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTypes

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RequestExecution_2eproto__INCLUDED
