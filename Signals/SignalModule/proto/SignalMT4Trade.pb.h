// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignalMT4Trade.proto

#ifndef PROTOBUF_SignalMT4Trade_2eproto__INCLUDED
#define PROTOBUF_SignalMT4Trade_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoTypes {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SignalMT4Trade_2eproto();
void protobuf_AssignDesc_SignalMT4Trade_2eproto();
void protobuf_ShutdownFile_SignalMT4Trade_2eproto();

class MT4TradeSignal;

enum ActionType {
  Open = 0,
  Close = 1
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = Open;
const ActionType ActionType_MAX = Close;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum TradeSide {
  Buy = 0,
  Sell = 1
};
bool TradeSide_IsValid(int value);
const TradeSide TradeSide_MIN = Buy;
const TradeSide TradeSide_MAX = Sell;
const int TradeSide_ARRAYSIZE = TradeSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* TradeSide_descriptor();
inline const ::std::string& TradeSide_Name(TradeSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradeSide_descriptor(), value);
}
inline bool TradeSide_Parse(
    const ::std::string& name, TradeSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeSide>(
    TradeSide_descriptor(), name, value);
}
// ===================================================================

class MT4TradeSignal : public ::google::protobuf::Message {
 public:
  MT4TradeSignal();
  virtual ~MT4TradeSignal();

  MT4TradeSignal(const MT4TradeSignal& from);

  inline MT4TradeSignal& operator=(const MT4TradeSignal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MT4TradeSignal& default_instance();

  void Swap(MT4TradeSignal* other);

  // implements Message ----------------------------------------------

  MT4TradeSignal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MT4TradeSignal& from);
  void MergeFrom(const MT4TradeSignal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoTypes.TradeSide Side = 1;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 1;
  inline ::ProtoTypes::TradeSide side() const;
  inline void set_side(::ProtoTypes::TradeSide value);

  // required .ProtoTypes.ActionType ActionType = 2;
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActionTypeFieldNumber = 2;
  inline ::ProtoTypes::ActionType actiontype() const;
  inline void set_actiontype(::ProtoTypes::ActionType value);

  // required int64 DateTime = 3;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDateTimeFieldNumber = 3;
  inline ::google::protobuf::int64 datetime() const;
  inline void set_datetime(::google::protobuf::int64 value);

  // required double Equity = 4;
  inline bool has_equity() const;
  inline void clear_equity();
  static const int kEquityFieldNumber = 4;
  inline double equity() const;
  inline void set_equity(double value);

  // required double Balance = 5;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 5;
  inline double balance() const;
  inline void set_balance(double value);

  // required double Volume = 6;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 6;
  inline double volume() const;
  inline void set_volume(double value);

  // required string Symbol = 7;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 7;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional double StopLoss = 8 [default = 0];
  inline bool has_stoploss() const;
  inline void clear_stoploss();
  static const int kStopLossFieldNumber = 8;
  inline double stoploss() const;
  inline void set_stoploss(double value);

  // optional double TakeProfit = 9 [default = 0];
  inline bool has_takeprofit() const;
  inline void clear_takeprofit();
  static const int kTakeProfitFieldNumber = 9;
  inline double takeprofit() const;
  inline void set_takeprofit(double value);

  // required int32 Login = 10;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 10;
  inline ::google::protobuf::int32 login() const;
  inline void set_login(::google::protobuf::int32 value);

  // required string Server = 11;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 11;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const char* value, size_t size);
  inline ::std::string* mutable_server();
  inline ::std::string* release_server();
  inline void set_allocated_server(::std::string* server);

  // required int32 OrderID = 12;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 12;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // required string Comment = 13;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 13;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // required double Profit = 14 [default = 0];
  inline bool has_profit() const;
  inline void clear_profit();
  static const int kProfitFieldNumber = 14;
  inline double profit() const;
  inline void set_profit(double value);

  // required double ProviderCommission = 15 [default = 0];
  inline bool has_providercommission() const;
  inline void clear_providercommission();
  static const int kProviderCommissionFieldNumber = 15;
  inline double providercommission() const;
  inline void set_providercommission(double value);

  // @@protoc_insertion_point(class_scope:ProtoTypes.MT4TradeSignal)
 private:
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_equity();
  inline void clear_has_equity();
  inline void set_has_balance();
  inline void clear_has_balance();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_stoploss();
  inline void clear_has_stoploss();
  inline void set_has_takeprofit();
  inline void clear_has_takeprofit();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_profit();
  inline void clear_has_profit();
  inline void set_has_providercommission();
  inline void clear_has_providercommission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int side_;
  int actiontype_;
  ::google::protobuf::int64 datetime_;
  double equity_;
  double balance_;
  double volume_;
  ::std::string* symbol_;
  double stoploss_;
  double takeprofit_;
  ::std::string* server_;
  ::google::protobuf::int32 login_;
  ::google::protobuf::int32 orderid_;
  ::std::string* comment_;
  double profit_;
  double providercommission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_SignalMT4Trade_2eproto();
  friend void protobuf_AssignDesc_SignalMT4Trade_2eproto();
  friend void protobuf_ShutdownFile_SignalMT4Trade_2eproto();

  void InitAsDefaultInstance();
  static MT4TradeSignal* default_instance_;
};
// ===================================================================


// ===================================================================

// MT4TradeSignal

// required .ProtoTypes.TradeSide Side = 1;
inline bool MT4TradeSignal::has_side() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MT4TradeSignal::set_has_side() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MT4TradeSignal::clear_has_side() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MT4TradeSignal::clear_side() {
  side_ = 0;
  clear_has_side();
}
inline ::ProtoTypes::TradeSide MT4TradeSignal::side() const {
  return static_cast< ::ProtoTypes::TradeSide >(side_);
}
inline void MT4TradeSignal::set_side(::ProtoTypes::TradeSide value) {
  assert(::ProtoTypes::TradeSide_IsValid(value));
  set_has_side();
  side_ = value;
}

// required .ProtoTypes.ActionType ActionType = 2;
inline bool MT4TradeSignal::has_actiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MT4TradeSignal::set_has_actiontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MT4TradeSignal::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MT4TradeSignal::clear_actiontype() {
  actiontype_ = 0;
  clear_has_actiontype();
}
inline ::ProtoTypes::ActionType MT4TradeSignal::actiontype() const {
  return static_cast< ::ProtoTypes::ActionType >(actiontype_);
}
inline void MT4TradeSignal::set_actiontype(::ProtoTypes::ActionType value) {
  assert(::ProtoTypes::ActionType_IsValid(value));
  set_has_actiontype();
  actiontype_ = value;
}

// required int64 DateTime = 3;
inline bool MT4TradeSignal::has_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MT4TradeSignal::set_has_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MT4TradeSignal::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MT4TradeSignal::clear_datetime() {
  datetime_ = GOOGLE_LONGLONG(0);
  clear_has_datetime();
}
inline ::google::protobuf::int64 MT4TradeSignal::datetime() const {
  return datetime_;
}
inline void MT4TradeSignal::set_datetime(::google::protobuf::int64 value) {
  set_has_datetime();
  datetime_ = value;
}

// required double Equity = 4;
inline bool MT4TradeSignal::has_equity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MT4TradeSignal::set_has_equity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MT4TradeSignal::clear_has_equity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MT4TradeSignal::clear_equity() {
  equity_ = 0;
  clear_has_equity();
}
inline double MT4TradeSignal::equity() const {
  return equity_;
}
inline void MT4TradeSignal::set_equity(double value) {
  set_has_equity();
  equity_ = value;
}

// required double Balance = 5;
inline bool MT4TradeSignal::has_balance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MT4TradeSignal::set_has_balance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MT4TradeSignal::clear_has_balance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MT4TradeSignal::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
inline double MT4TradeSignal::balance() const {
  return balance_;
}
inline void MT4TradeSignal::set_balance(double value) {
  set_has_balance();
  balance_ = value;
}

// required double Volume = 6;
inline bool MT4TradeSignal::has_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MT4TradeSignal::set_has_volume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MT4TradeSignal::clear_has_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MT4TradeSignal::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline double MT4TradeSignal::volume() const {
  return volume_;
}
inline void MT4TradeSignal::set_volume(double value) {
  set_has_volume();
  volume_ = value;
}

// required string Symbol = 7;
inline bool MT4TradeSignal::has_symbol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MT4TradeSignal::set_has_symbol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MT4TradeSignal::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MT4TradeSignal::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& MT4TradeSignal::symbol() const {
  return *symbol_;
}
inline void MT4TradeSignal::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MT4TradeSignal::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MT4TradeSignal::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MT4TradeSignal::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* MT4TradeSignal::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MT4TradeSignal::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double StopLoss = 8 [default = 0];
inline bool MT4TradeSignal::has_stoploss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MT4TradeSignal::set_has_stoploss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MT4TradeSignal::clear_has_stoploss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MT4TradeSignal::clear_stoploss() {
  stoploss_ = 0;
  clear_has_stoploss();
}
inline double MT4TradeSignal::stoploss() const {
  return stoploss_;
}
inline void MT4TradeSignal::set_stoploss(double value) {
  set_has_stoploss();
  stoploss_ = value;
}

// optional double TakeProfit = 9 [default = 0];
inline bool MT4TradeSignal::has_takeprofit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MT4TradeSignal::set_has_takeprofit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MT4TradeSignal::clear_has_takeprofit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MT4TradeSignal::clear_takeprofit() {
  takeprofit_ = 0;
  clear_has_takeprofit();
}
inline double MT4TradeSignal::takeprofit() const {
  return takeprofit_;
}
inline void MT4TradeSignal::set_takeprofit(double value) {
  set_has_takeprofit();
  takeprofit_ = value;
}

// required int32 Login = 10;
inline bool MT4TradeSignal::has_login() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MT4TradeSignal::set_has_login() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MT4TradeSignal::clear_has_login() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MT4TradeSignal::clear_login() {
  login_ = 0;
  clear_has_login();
}
inline ::google::protobuf::int32 MT4TradeSignal::login() const {
  return login_;
}
inline void MT4TradeSignal::set_login(::google::protobuf::int32 value) {
  set_has_login();
  login_ = value;
}

// required string Server = 11;
inline bool MT4TradeSignal::has_server() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MT4TradeSignal::set_has_server() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MT4TradeSignal::clear_has_server() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MT4TradeSignal::clear_server() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    server_->clear();
  }
  clear_has_server();
}
inline const ::std::string& MT4TradeSignal::server() const {
  return *server_;
}
inline void MT4TradeSignal::set_server(const ::std::string& value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void MT4TradeSignal::set_server(const char* value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void MT4TradeSignal::set_server(const char* value, size_t size) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MT4TradeSignal::mutable_server() {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  return server_;
}
inline ::std::string* MT4TradeSignal::release_server() {
  clear_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_;
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MT4TradeSignal::set_allocated_server(::std::string* server) {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (server) {
    set_has_server();
    server_ = server;
  } else {
    clear_has_server();
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 OrderID = 12;
inline bool MT4TradeSignal::has_orderid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MT4TradeSignal::set_has_orderid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MT4TradeSignal::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MT4TradeSignal::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 MT4TradeSignal::orderid() const {
  return orderid_;
}
inline void MT4TradeSignal::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
}

// required string Comment = 13;
inline bool MT4TradeSignal::has_comment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MT4TradeSignal::set_has_comment() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MT4TradeSignal::clear_has_comment() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MT4TradeSignal::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& MT4TradeSignal::comment() const {
  return *comment_;
}
inline void MT4TradeSignal::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void MT4TradeSignal::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void MT4TradeSignal::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MT4TradeSignal::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* MT4TradeSignal::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MT4TradeSignal::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double Profit = 14 [default = 0];
inline bool MT4TradeSignal::has_profit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MT4TradeSignal::set_has_profit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MT4TradeSignal::clear_has_profit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MT4TradeSignal::clear_profit() {
  profit_ = 0;
  clear_has_profit();
}
inline double MT4TradeSignal::profit() const {
  return profit_;
}
inline void MT4TradeSignal::set_profit(double value) {
  set_has_profit();
  profit_ = value;
}

// required double ProviderCommission = 15 [default = 0];
inline bool MT4TradeSignal::has_providercommission() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MT4TradeSignal::set_has_providercommission() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MT4TradeSignal::clear_has_providercommission() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MT4TradeSignal::clear_providercommission() {
  providercommission_ = 0;
  clear_has_providercommission();
}
inline double MT4TradeSignal::providercommission() const {
  return providercommission_;
}
inline void MT4TradeSignal::set_providercommission(double value) {
  set_has_providercommission();
  providercommission_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTypes

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoTypes::ActionType>() {
  return ::ProtoTypes::ActionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoTypes::TradeSide>() {
  return ::ProtoTypes::TradeSide_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SignalMT4Trade_2eproto__INCLUDED
